generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Class {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  semester    Int
  year        Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  course      String
  Users       User[]
  Activities  Activity[]
  UserOnClass UserOnClass[]

  @@map("classes")
}

model UserOnClass {
  classId Int
  userId  Int
  class   Class @relation(fields: [classId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@id([classId, userId])
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  name          String
  situation     Situation       @default(ACTIVE)
  description   String?
  sex           String?
  role          Role            @default(STUDENT)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  classes       Class[]
  UserOnClass   UserOnClass[]
  student       Student?
  Advisor       Advisor?
  Teacher       Teacher?
  KnowledgeArea KnowledgeArea[]

  @@map("users")
}

model Student {
  id        Int     @id @default(autoincrement())
  code      String  @unique
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
  advisor   Advisor? @relation(fields: [advisorId], references: [id])
  advisorId Int?

  @@map("students")
}

model Advisor {
  id         Int       @id @default(autoincrement())
  name       String
  lattesLink String?
  user       User      @relation(fields: [userId], references: [id])
  userId     Int       @unique
  Student    Student[]

  @@map("advisors")
}

model Teacher {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  @@map("teachers")
}

model Activity {
  id          Int       @id @default(autoincrement())
  name        String
  title       String
  description String
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  class       Class     @relation(fields: [classId], references: [id])
  classId     Int
  Task        Task?

  @@map("activities")
}

model KnowledgeArea {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("knowledge_areas")
}

model Task {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  deadline    DateTime?
  completed   Completed @default(NO)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  activity    Activity  @relation(fields: [activityId], references: [id])
  activityId  Int       @unique

  @@map("tasks")
}

enum Role {
  STUDENT
  TEACHER
  ADVISOR
  ADMIN
}

enum Situation {
  ACTIVE
  INACTIVE
}

enum Completed {
  YES
  NO
}
