generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Class {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  semester    Int
  year        Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  course      String
  activities  Activity[]
  UserOnClass UserOnClass[]

  @@map("classes")
}

model UserOnClass {
  classId Int
  userId  Int
  class   Class @relation(fields: [classId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@id([classId, userId])
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  password       String
  name           String
  situation      Situation       @default(ACTIVE)
  description    String?
  sex            String?
  role           Role            @default(STUDENT)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  UserOnClass    UserOnClass[]
  student        Student?
  Advisor        Advisor?
  Teacher        Teacher?
  knowledgeAreas KnowledgeArea[]

  @@map("users")
}

model Student {
  id                Int                 @id @default(autoincrement())
  code              String              @unique
  user              User                @relation(fields: [userId], references: [id])
  userId            Int                 @unique
  StudentOnAdvisor   StudentOnAdvisor[]
  ActivityOnStudent ActivityOnStudent[]

  @@map("students")
}

model Advisor {
  id         Int       @id @default(autoincrement())
  lattesLink String?
  user       User      @relation(fields: [userId], references: [id])
  userId     Int       @unique
  StudentOnAdvisor   StudentOnAdvisor[]

  @@map("advisors")
}
model StudentOnAdvisor {
  advisorId Int
  studentId Int
  description String
  evaluated Boolean
  advisor   Advisor @relation(fields: [advisorId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])

  @@id([advisorId, studentId])
}

model Teacher {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  @@map("teachers")
}

model Activity {
  id                Int                 @id @default(autoincrement())
  name              String
  title             String
  description       String
  deadline          DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  class             Class               @relation(fields: [classId], references: [id])
  classId           Int                 @unique
  ActivityOnStudent ActivityOnStudent[]

  @@map("activities")
}

model KnowledgeArea {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("knowledge_areas")
}

model ActivityOnStudent {
  activityId Int
  studentId  Int
  activity   Activity  @relation(fields: [activityId], references: [id])
  student    Student   @relation(fields: [studentId], references: [id])
  completed  Boolean

  @@id([activityId, studentId])
}

enum Role {
  STUDENT
  TEACHER
  ADVISOR
  ADMIN
}

enum Situation {
  ACTIVE
  INACTIVE
}


